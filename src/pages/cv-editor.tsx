"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import {
  Bold,
  Italic,
  Underline,
  AlignLeft,
  AlignCenter,
  AlignRight,
  AlignJustify,
  ChevronDown,
  ChevronLeft,
  List,
  ListOrdered,
} from "lucide-react"
import CVTemplate from "@/pages/CVTemplate2"
import RightSidebar from "@/components/RightSidebar"
import LeftSidebar from "@/components/LeftSidebar"

export default function CVBuilder() {
  const [selectedFont, setSelectedFont] = useState("Be Vietnam")
  const [selectedLayout, setSelectedLayout] = useState("B·ªô c·ª•c CV")
  const [isLeftSidebarOpen, setIsLeftSidebarOpen] = useState(false)
  const [isRightSidebarOpen, setIsRightSidebarOpen] = useState(true)
  const [activeContent, setActiveContent] = useState<string | null>(null)
  const [selectedSection, setSelectedSection] = useState<string | null>(null)
  const [cvData, setCvData] = useState({
    name: "Nguy·ªÖn Ng·ªçc Vy",
    subtitle: "Qu·∫£n Tr·ªã Kinh Doanh T·ªïng H·ª£p",
    photoUrl: "https://img6.thuthuatphanmem.vn/uploads/2022/11/18/anh-avatar-don-gian-cho-nu_081757692.jpg",
    contact: {
      phone: "085 234 3477",
      fax: "089 923 0449",
      email: "nguyengocvyyy00@gmail.com",
      facebook: "https://facebook.com/nguyengocvy",
      instagram: "https://instagram.com/nguyengocvy",
      address: "206 Hu·ª≥nh T·∫•n Ph√°t, Qu·∫≠n H·∫£i Ch√¢u, ƒê√† N·∫µng",
    },
    objective: {
      title: "M·ª•c ti√™u ngh·ªÅ nghi·ªáp",
      content:
        "Tr·ªü th√†nh Chuy√™n vi√™n trong lƒ©nh v·ª±c Kinh doanh & Marketing. T√¥i hi·ªán ƒëang t√¨m ki·∫øm h∆∞·ªõng ƒëi ƒë·ªÉ ph√°t tri·ªÉn b·∫£n th√¢n. V√† hi·ªán t√¥i ƒëang tin cho m√¨nh c√≥ h·ªôi ƒë·ªÉ ƒë∆∞·ª£c l√†m vi·ªác ·ªü m√¥i tr∆∞·ªùng ƒë√†o t·∫°o chuy√™n nghi·ªáp v√† nhi·ªát huy·∫øt.",
    },
    expertise: {
      title: "Lƒ©nh v·ª±c chuy√™n m√¥n",
      items: [
        "Kinh nghi·ªám v·ªÅ Microsoft & PowerPoint",
        "K·ªπ nƒÉng giao ti·∫øp ƒë√†m ph√°n t·ªët",
        "Kinh nghi·ªám thi·∫øt k·∫ø tr√™n ph·∫ßn m·ªÅm Canva",
        "K·ªπ nƒÉng qu·∫£n l√Ω th·ªùi gian t·ªët",
        "K·ªπ nƒÉng thuy·∫øt tr√¨nh",
        "Giao ti·∫øp ti·∫øng Anh c∆° b·∫£n",
      ],
    },
    otherSkills: {
      title: "K·ªπ nƒÉng kh√°c",
      items: [
        "Kh·∫£ nƒÉng ph√¢n t√≠ch c√°c th√¥ng tin k·ªπ thu·∫≠t ph·ª©c t·∫°p",
        "K·ªπ nƒÉng l√£nh ƒë·∫°o l√†m vi·ªác nh√≥m t·ªët",
        "Ch√∫ √Ω chi ti·∫øt",
        "Kh·∫£ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ xu·∫•t s·∫Øc",
      ],
    },
    hobbies: {
      title: "S·ªü th√≠ch",
      items: ["ƒê·ªçc s√°ch", "N·∫•u ƒÉn", "T·∫≠p Th·ªÉ D·ª•c", "V·∫Ω tranh"],
    },
    experiences: {
      title: "Kinh nghi·ªám l√†m vi·ªác",
      summary: "2 nƒÉm trong lƒ©nh v·ª±c li√™n quan",
      items: [
        {
          title: "Social Media Marketing t·∫°i L·∫°c T·ª± Wedding",
          details: [
            "Vi·∫øt content n·ªôi dung cho b√†i vi·∫øt tr√™n Fanpage",
            "Tham gia ekip ch·ª•p h√¨nh, quay phim t·∫°i n∆°i l√†m vi·ªác",
            "ƒê·ªÅ ra c√°c chi·∫øn l∆∞·ª£c cho qu·∫£ng c√°o v√† ti·∫øp th·ªã",
          ],
        },
        {
          title: "Marketing Associate t·∫°i CT7810Y AZ Media",
          details: [
            "L·∫≠p k·∫ø ho·∫°ch ti·∫øp th·ªã cho CTY",
            "Tham gia c√°c d·ª± √°n PR c·ªßa c√°c ƒë∆°n v·ªã h·ª£p t√°c",
            "Vi·∫øt content v√† thi·∫øt k·∫ø h√¨nh ·∫£nh cho CTY",
          ],
        },
        {
          title: "Social Marketing Manager t·∫°i Shop Hoa T∆∞∆°i",
          details: [
            "L·∫≠p k·∫ø ho·∫°ch chi·∫øn l∆∞·ª£c ti·∫øp th·ªã v√† qu·∫£ng b√° th∆∞∆°ng hi·ªáu",
            "Thi·∫øt k·∫ø logo, banner, background c·ªßa Shop",
            "T∆∞ v·∫•n chƒÉm s√≥c kh√°ch h√†ng c·ªßa Shop",
            "Vi·∫øt content v√† n·ªôi dung cho b√†i vi·∫øt tr√™n page c·ªßa Shop",
          ],
        },
      ],
      additionalNote:
        "V√† ngo√†i ra c√≤n c√≥ kinh nghi·ªám ·ªü m·ªôt s·ªë c√¥ng vi·ªác li√™n quan nh∆∞ b√°n h√†ng online, t∆∞ v·∫•n vi√™n telesales.",
    },
    education: {
      title: "L·ªãch s·ª≠ h·ªçc v·∫•n",
      items: [
        {
          institution: "ƒê·∫°i H·ªçc Ki·∫øn Tr√∫c ƒê√† N·∫µng",
          details: [
            "D·ª± ki·∫øn t·ªët nghi·ªáp nh·∫≠n b·∫±ng t·∫°m th·ªùi th√°ng 1/2022",
            "Ho√†n th√†nh t√≠n ch·ªâ Qu·∫£n tr·ªã Kinh doanh T·ªïng h·ª£p",
            "ƒêi·ªÉm t√≠ch l≈©y qua 4 nƒÉm h·ªçc ƒë·∫°i h·ªçc lo·∫°i Gi·ªèi tr√™n 8.0",
            "Th√†nh t√≠ch trong ho·∫°t ƒë·ªông phong tr√†o lo·∫°i Xu·∫•t s·∫Øc",
          ],
        },
      ],
    },
    certificates: {
      title: "M·ªôt s·ªë ch·ª©ng ch·ªâ ƒë·∫°t ƒë∆∞·ª£c",
      items: [
        "Ch·ª©ng ch·ªâ Digital Marketing c·ªßa Google",
        "Ch·ª©ng ch·ªâ Digital Body Language",
        "Ch·ª©ng ch·ªâ Digital Networking Strategies",
      ],
    },
  })

  const editorRef = useRef<HTMLDivElement>(null)

  const navItems = [
    { id: "color", label: "ƒê·ªïi m√†u CV", icon: "üé®", contentType: "color" },
    { id: "template", label: "ƒê·ªïi m·∫´u CV", icon: "üìÑ", contentType: "template", active: true },
    { id: "language", label: "ƒê·ªïi ng√¥n ng·ªØ CV", icon: "üåê", contentType: "language", highlight: true },
    { id: "reference", label: "CV tham kh·∫£o", icon: "üìã", contentType: null },
    { id: "preview", label: "Xem tr∆∞·ªõc", icon: "üëÅÔ∏è", contentType: null },
    { id: "save", label: "L∆∞u CV", icon: "üíæ", contentType: null },
    { id: "download", label: "T·∫£i xu·ªëng", icon: "‚¨áÔ∏è", contentType: null },
  ]

  const handleNavClick = (contentType: string | null) => {
    if (contentType) {
      setIsLeftSidebarOpen(true)
      setIsRightSidebarOpen(false)
      setActiveContent(contentType)
    } else {
      setIsLeftSidebarOpen(false)
      setIsRightSidebarOpen(true)
      setActiveContent(null)
    }
  }

  const toggleRightSidebar = () => {
    setIsRightSidebarOpen(true)
    setIsLeftSidebarOpen(false)
    setActiveContent(null)
  }

  const toggleSidebar = () => {
    setIsLeftSidebarOpen(!isLeftSidebarOpen)
    setIsRightSidebarOpen(!isRightSidebarOpen)
    if (isLeftSidebarOpen) setActiveContent(null)
  }

  const handleFormat = (command: string, value: string | undefined = undefined) => {
    if (editorRef.current) {
      document.execCommand(command, false, value)
      editorRef.current.focus()
    }
  }

  const handleFontChange = (font: string) => {
    setSelectedFont(font)
    if (editorRef.current) {
      editorRef.current.style.fontFamily = font
    }
  }

  const handleLayoutChange = (layout: string) => {
    setSelectedLayout(layout)
    // Implement layout change logic if needed
  }

  const handleContentChange = (key: string, value: any) => {
    setCvData((prev) => ({
      ...prev,
      [key]: value,
    }))
  }

  // Handle section click from CV template
  const handleSectionClick = (sectionTitle: string) => {
    setSelectedSection(sectionTitle)
    // Ensure right sidebar is open when section is clicked
    if (!isRightSidebarOpen) {
      setIsRightSidebarOpen(true)
      setIsLeftSidebarOpen(false)
      setActiveContent(null)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Navigation Header */}
      <div className="bg-white border-b border-gray-200 px-4 py-3 fixed top-0 left-0 right-0 z-20">
        <div className="flex flex-wrap gap-2 items-center justify-center">
          {navItems.map((item) => (
            <Button
              key={item.id}
              variant={item.active ? "default" : "ghost"}
              size="sm"
              className={`flex items-center gap-2 ${item.highlight ? "bg-red-500 hover:bg-red-600 text-white" : ""} ${item.active ? "bg-blue-500 hover:bg-blue-600" : ""}`}
              onClick={() => handleNavClick(item.contentType)}
            >
              <span>{item.icon}</span>
              {item.label}
            </Button>
          ))}
        </div>
      </div>

      {/* Formatting Toolbar */}
      <div className="bg-white border-b border-gray-200 px-4 py-3 fixed top-[57px] left-0 right-0 z-20 flex justify-center">
        <div className="flex items-center gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-6 px-2 text-xs font-normal justify-between min-w-[80px]">
                {selectedLayout}
                <ChevronDown className="h-3 w-3 ml-1" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start" className="w-[120px]">
              <DropdownMenuItem onClick={() => handleLayoutChange("B·ªô c·ª•c CV")}>B·ªô c·ª•c CV</DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleLayoutChange("B·ªë c·ª•c ƒë∆°n gi·∫£n")}>B·ªë c·ª•c ƒë∆°n gi·∫£n</DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleLayoutChange("B·ªë c·ª•c chuy√™n nghi·ªáp")}>
                B·ªë c·ª•c chuy√™n nghi·ªáp
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-6 px-2 text-xs font-normal justify-between min-w-[80px]">
                {selectedFont}
                <ChevronDown className="h-3 w-3 ml-1" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start" className="w-[120px]">
              <DropdownMenuItem onClick={() => handleFontChange("Be Vietnam")}>Be Vietnam</DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleFontChange("Arial")}>Arial</DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleFontChange("Times New Roman")}>Times New Roman</DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleFontChange("Roboto")}>Roboto</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <div className="w-px h-4 bg-gray-300 mx-1" />

          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("bold")}>
            <Bold className="h-3 w-3" />
          </Button>
          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("italic")}>
            <Italic className="h-3 w-3" />
          </Button>
          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("underline")}>
            <Underline className="h-3 w-3" />
          </Button>

          <div className="w-px h-4 bg-gray-300 mx-1" />

          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("justifyLeft")}>
            <AlignLeft className="h-3 w-3" />
          </Button>
          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("justifyCenter")}>
            <AlignCenter className="h-3 w-3" />
          </Button>
          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("justifyRight")}>
            <AlignRight className="h-3 w-3" />
          </Button>
          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("justifyFull")}>
            <AlignJustify className="h-3 w-3" />
          </Button>

          <div className="w-px h-4 bg-gray-300 mx-1" />

          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("insertUnorderedList")}>
            <List className="h-3 w-3" />
          </Button>
          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => handleFormat("insertOrderedList")}>
            <ListOrdered className="h-3 w-3" />
          </Button>
        </div>
      </div>

      <div className="flex min-h-[calc(100vh-120px)] mt-[120px]">
        {/* Left Sidebar */}
        {isLeftSidebarOpen && (
          <div className="w-80 fixed left-0 top-[105px] bottom-0 z-10">
            <LeftSidebar
              navItems={navItems}
              onClose={toggleSidebar}
              activeContent={activeContent}
              handleNavClick={handleNavClick}
            />
          </div>
        )}

        {/* Main CV Editor */}
        <div
          ref={editorRef}
          className={`flex-1 flex justify-center transition-all duration-300 ${
            isLeftSidebarOpen ? "pl-100" : ""
          } ${isRightSidebarOpen ? "pr-100" : ""}`}
        >
          <div className="max-w-4xl w-full">
            <CVTemplate
              data={cvData}
              onContentChange={handleContentChange}
              selectedFont={selectedFont}
              onSectionClick={handleSectionClick}
            />
          </div>
        </div>

        {/* Right Sidebar */}
        {isRightSidebarOpen && (
          <RightSidebar cvData={cvData} selectedSection={selectedSection} onSectionClick={handleSectionClick} />
        )}

        {/* Arrow Button to Open Right Sidebar */}
        {!isRightSidebarOpen && (
          <Button
            variant="ghost"
            className="fixed right-4 top-1/2 transform -translate-y-1/2 z-20 bg-white shadow-md rounded-full p-2 hover:bg-gray-100"
            onClick={toggleRightSidebar}
            aria-label="Open Right Sidebar"
          >
            <ChevronLeft className="h-6 w-6 text-gray-600" />
          </Button>
        )}
      </div>
    </div>
  )
}